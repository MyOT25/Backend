generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  loginId         String          @unique
  username        String?
  password        String?
  email           String          @unique
  nickname        String?
  profileImage    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  bio             String?
  birthDate       DateTime?
  isSubscribed    Boolean?
  answers         Answer[]
  answerLikes     AnswerLike[]
  memoryBooks     MemoryBook[]
  multiProfiles   MultiProfile[]
  posts           Post[]
  postBookmarks   PostBookmark[]
  postComments    PostComment[]
  postLikes       PostLike[]
  questions       Question[]
  questionGoods   QuestionGood[]


  questionImages  QuestionImage[]
  questionLikes   QuestionLike[]
  questionTags    QuestionTag[]
  reviews         Review[]
  setting         Setting?
  subscriptions   Subscribe[]
  userCommunities UserCommunity[]
  viewings        ViewingRecord[]

  followers       Follow[]        @relation("Follower")
  followings      Follow[]        @relation("Following")
  userSeats       UserSeat[]
 

}

model Post {
  id             Int            @id @default(autoincrement())
  userId         Int
  communityId    Int
  isRepost       Boolean        @default(false)
  repostType     RepostType?
  repostTargetId Int?
  content        String?
  mediaType      MediaType?
  hasMedia       Boolean        @default(false)
  viewCount      Int            @default(0)
  commentCount   Int            @default(0)
  likeCount      Int            @default(0)
  bookmarkCount  Int            @default(0)
  repostCount    Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  postBookmarks  PostBookmark[]
  postComments   PostComment[]
  postImages     PostImage[]
  postLikes      PostLike[]
  postTags       PostTag[]
  reviews        Review[]

  community      Community      @relation(fields: [communityId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@index([communityId], map: "Post_communityId_fkey")
  @@index([userId], map: "Post_userId_fkey")
}

model PostImage {
  id      Int     @id @default(autoincrement())
  postId  Int
  url     String?
  caption String?
  post    Post    @relation(fields: [postId], references: [id])

  @@index([postId], map: "PostImage_postId_fkey")
}

model Tag_Post {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  postTags  PostTag[]
}

model PostTag {
  postId    Int
  tagId     Int
  tagPostId Int?
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id])
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagPost   Tag_Post? @relation(fields: [tagPostId], references: [id])

  @@id([postId, tagId])
  @@index([tagId], map: "PostTag_tagId_fkey")
  @@index([tagPostId], map: "PostTag_tagPostId_fkey")
}

model PostComment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  anonymous Boolean?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([postId], map: "PostComment_postId_fkey")
  @@index([userId], map: "PostComment_userId_fkey")
}

model PostLike {
  id      Int       @id @default(autoincrement())
  postId  Int
  userId  Int
  likedAt DateTime? @default(now())
  post    Post      @relation(fields: [postId], references: [id])
  user    User      @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([postId], map: "PostLike_postId_fkey")
}

model PostBookmark {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([postId], map: "PostBookmark_postId_fkey")
}

model Bookmark {
  id     Int @id @default(autoincrement())
  userId Int
  postId Int
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      Int
  settingId   Int
  theaterId   Int
  key         Int
  postId      Int?
  content     String?
  rating      Int?
  spoiler     Boolean?
  createdAt   DateTime?
  updatedAt   DateTime?
  liked       String?
  likeCount   Int?
  comment     String?
  imageUrl    String?
  reported    Boolean?
  watchDate   DateTime?
  watchTime   DateTime?
  extraField2 String?
  user        User      @relation(fields: [userId], references: [id])
  post        Post?     @relation(fields: [postId], references: [id], map: "review_postId_fkey")

  @@index([userId], map: "Review_userId_fkey")
  @@index([postId], map: "review_postId_fkey")
}

model Actor {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  key         Int
  name        String?
  image       String?
  profile     String?
  snsLink     String?
  fk          Int?
  castings    Casting[]
}

model Musical {
  id          Int                @id @default(autoincrement())
  theaterId   Int
  name        String?
  startDate   DateTime?
  endDate     DateTime?
  poster      String?
  createdAt   DateTime?
  updatedAt   DateTime?
  castings    Casting[]
  theater     Theater            @relation(fields: [theaterId], references: [id])
  communities MusicalCommunity[]
  viewings    ViewingRecord[]

  @@index([theaterId], map: "Musical_theaterId_fkey")
}

model Theater {
  id          Int       @id @default(autoincrement())
  regionId    Int
  name        String?
  seatCount   Int?
  roadAddress String?
  createdAt   DateTime?
  updatedAt   DateTime?
  musicals    Musical[]
  seats       Seat[]
  region      Region    @relation(fields: [regionId], references: [id])

  @@index([regionId], map: "Theater_regionId_fkey")
}

model Seat {
  id        Int             @id @default(autoincrement())
  theaterId Int
  floor     Int
  zone      String
  blockNumber Int
  rowNumber Int
  seatIndex Int
  

  theater   Theater         @relation(fields: [theaterId], references: [id])
  viewings  ViewingRecord[] // 이 좌석을 사용한 관극기록들 
  userSeats UserSeat[] //좌석에 연결된 사용자 관계 
  
}

model UserSeat {
  id              Int      @id @default(autoincrement())
  userId          Int
  seatId          Int
  numberOfSittings Int     @default(1) // 사용자가 해당 좌석에 앉은 횟수

  user            User     @relation(fields: [userId], references: [id])
  seat            Seat     @relation(fields: [seatId], references: [id])

  @@unique([userId, seatId]) // 한 좌석당 한 유저 데이터만 존재하게
}

>>>>>>> main
model Community {
  id                    Int                @id @default(autoincrement())
  type                  CommunityType
  targetId              Int?
  groupName             String
  musicalName           String?
  recentPerformanceDate DateTime?
  theaterName           String?
  ticketLink            String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  coverImage            String?            @db.VarChar(255)
  memoryBooks           MemoryBook?
  multiProfiles         MultiProfile[]
  musicalCommunities    MusicalCommunity[]
  posts                 Post[]
  userCommunities       UserCommunity[]
}

model Setting {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  useBackground   Boolean?
  useProfilePhoto Boolean?
  allowRepost     Boolean?
  users           User     @relation(fields: [userId], references: [id])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  postTags  PostTag[]
}

model Subscribe {
  id        Int       @id @default(autoincrement())
  userId    Int
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "Subscribe_userId_fkey")
}

model Follow {
  id          Int       @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime  @default(now())
  
  follower    User      @relation("Follower", fields: [followerId], references: [id])
  following   User      @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId], map: "Follow_followerId_fkey")
  @@index([followingId], map: "Follow_followingId_fkey")
}

model ViewingRecord {
  id        Int            @id @default(autoincrement())
  userId    Int
  musicalId Int
  seatId    Int?
  date      DateTime?
  time      DateTime?
  content   String?
  rating    Int?
  images    ViewingImage[]
  musical   Musical        @relation(fields: [musicalId], references: [id])
  seat      Seat?          @relation(fields: [seatId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@index([musicalId], map: "ViewingRecord_musicalId_fkey")
  @@index([seatId], map: "ViewingRecord_seatId_fkey")
  @@index([userId], map: "ViewingRecord_userId_fkey")
}

model ViewingImage {
  id        Int           @id @default(autoincrement())
  viewingId Int
  url       String
  createdAt DateTime?     @default(now())
  viewing   ViewingRecord @relation(fields: [viewingId], references: [id])

  @@index([viewingId], map: "ViewingImage_viewingId_fkey")
}

model Question {
  id            Int             @id @default(autoincrement())
  userId        Int
  title         String
  content       String
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime        @updatedAt
  answers       Answer[]
  answerLikes   AnswerLike[]
  user          User            @relation(fields: [userId], references: [id])
  questionGoods QuestionGood[]
  images        QuestionImage[]
  likes         QuestionLike[]
  questionTags  QuestionTag[]

  @@index([userId], map: "Question_userId_fkey")
}

model Answer {
  id         Int          @id @default(autoincrement())
  questionId Int
  userId     Int
  content    String
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime     @updatedAt
  question   Question     @relation(fields: [questionId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  likes      AnswerLike[]

  @@index([questionId], map: "Answer_questionId_fkey")
  @@index([userId], map: "Answer_userId_fkey")
}

model QuestionLike {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([questionId, userId])
  @@index([userId], map: "QuestionLike_userId_fkey")
}

model AnswerLike {
  id         Int      @id @default(autoincrement())
  answerId   Int
  userId     Int
  questionId Int
  createdAt  DateTime @default(now())
  answer     Answer   @relation(fields: [answerId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([answerId, userId])
  @@index([questionId], map: "AnswerLike_questionId_fkey")
  @@index([userId], map: "AnswerLike_userId_fkey")
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String
  theaters Theater[]
}

model Casting {
  id        Int     @id @default(autoincrement())
  musicalId Int
  actorId   Int
  role      String?
  actor     Actor   @relation(fields: [actorId], references: [id])
  musical   Musical @relation(fields: [musicalId], references: [id])

  @@index([actorId], map: "Casting_actorId_fkey")
  @@index([musicalId], map: "Casting_musicalId_fkey")
}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  joinedAt    DateTime? @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([communityId], map: "UserCommunity_communityId_fkey")
  @@index([userId], map: "UserCommunity_userId_fkey")
}

model MusicalCommunity {
  id          Int       @id @default(autoincrement())
  musicalId   Int
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  musical     Musical   @relation(fields: [musicalId], references: [id])

  @@index([communityId], map: "MusicalCommunity_communityId_fkey")
  @@index([musicalId], map: "MusicalCommunity_musicalId_fkey")
}

model MultiProfile {
  id          Int       @id @default(autoincrement())
  userId      Int
  nickname    String
  image       String?
  bio         String?
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([communityId], map: "MultiProfile_communityId_fkey")
  @@index([userId], map: "MultiProfile_userId_fkey")
}

model MemoryBook {
  id          Int        @id @default(autoincrement())
  userId      Int
  targetType  TargetType
  targetId    Int
  title       String
  content     Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  communityId Int?       @unique
  community   Community? @relation(fields: [communityId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "MemoryBook_userId_fkey")
}

model QuestionGood {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([questionId], map: "QuestionGood_questionId_fkey")
  @@index([userId], map: "QuestionGood_userId_fkey")
}

model QuestionImage {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([questionId], map: "QuestionImage_questionId_fkey")
  @@index([userId], map: "QuestionImage_userId_fkey")
}

model QuestionTag {
  id         Int               @id @default(autoincrement())
  questionId Int
  userId     Int
  tagId      Int
  createdAt  DateTime          @default(now())
  question   Question          @relation(fields: [questionId], references: [id])
  tag        QuestionTagMaster @relation(fields: [tagId], references: [id])
  user       User              @relation(fields: [userId], references: [id])

  @@index([questionId], map: "QuestionTag_questionId_fkey")
  @@index([tagId], map: "QuestionTag_tagId_fkey")
  @@index([userId], map: "QuestionTag_userId_fkey")
}

model QuestionTagMaster {
  id        Int           @id @default(autoincrement())
  tagName   String        @unique
  createdAt DateTime      @default(now())
  questions QuestionTag[]
}

enum RepostType {
  post
  review
}

enum MediaType {
  image
  video
}

enum TargetType {
  MUSICAL
  ACTOR
}

enum CommunityType {
  musical
  actor
}

enum Seat_seat_type {
  VIP
}
