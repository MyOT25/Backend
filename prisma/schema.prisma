generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  loginId         String          @unique
  username        String?
  password        String?
  email           String          @unique
  nickname        String?
  profileImage    String?
  createdAt       DateTime?
  updatedAt       DateTime?
  bio             String?
  birthDate       DateTime?
  isSubscribed    Boolean?

  setting         Setting? 
  posts           Post[]
  reviews         Review[]

  postcomments  PostComment[]
  postLikes     PostLike[]
  postbookmarks PostBookmark[]
  questions     Question[]
  answers       Answer[]
  subscriptions Subscribe[]
  viewings      ViewingRecord[]
  follows       Follow[] @relation("Following")
  followers     Follow[] @relation("Follower")
  questionLikes   QuestionLike[]      
  answerLikes     AnswerLike[]        
  questionTags    QuestionTag[]       
  questionImages  QuestionImage[]     

  multiProfiles  MultiProfile[]
  userCommunities UserCommunity[]
  memoryBooks     MemoryBook[]
  
 
  
  questionGoods   QuestionGood[]
 
  
}

model Post {
  id             Int         @id @default(autoincrement())
  userId         Int
  communityId    Int
  isRepost       Boolean     @default(false)
  repostType     RepostType?
  repostTargetId Int?
  title          String?
  content        String?
  mediaType      MediaType?
  viewCount      Int         @default(0)
  commentCount   Int         @default(0)
  likeCount      Int         @default(0)
  bookmarkCount  Int         @default(0)
  repostCount    Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  hasMedia       Boolean        @default(false)
                                              
        

 // Relations
  user           User        @relation(fields: [userId], references: [id])
  community      Community   @relation(fields: [communityId], references: [id])


  postcomments      PostComment[]
  postLikes         PostLike[]
  postbookmarks     PostBookmark[]
  postTags          PostTag[] 
  postimages        PostImage[]
  reviews           Review[]
  images            Image[]

}

model PostComment {
  id              Int      @id @default(autoincrement())
  postId          Int
  userId          Int
  anonymous       Boolean?
  content         String?
  createdAt         DateTime       @default(now())       
  updatedAt         DateTime       @updatedAt  

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])


}

model PostLike {
  id      Int       @id @default(autoincrement())
  postId  Int
  userId  Int
  likedAt DateTime? @default(now())

  post    Post      @relation(fields: [postId], references: [id])
  user    User      @relation(fields: [userId], references: [id])

  @@unique([userId, postId]) // 같은 유저가 같은 글에 여러 번 좋아요 누를수 x 
}


model Bookmark {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
}

model PostBookmark {
  id      Int    @id @default(autoincrement())
  userId  Int
  postId  Int

  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

//게시글 관련 태그
model Tag_Post {
  id     Int    @id @default(autoincrement())
  name   String @unique
  createdAt         DateTime       @default(now())

  postTags      PostTag[]
}



model PostImage {
  id     Int    @id @default(autoincrement())
  postId    Int
  url       String?
  caption   String?

  post      Post    @relation(fields: [postId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      Int
  settingId   Int
  theaterId   Int
  key         Int
  postId      Int?
  content     String?
  rating      Int?
  spoiler     Boolean?
  createdAt   DateTime?
  updatedAt   DateTime?
  liked       String?
  likeCount   Int?
  comment     String?
  imageUrl    String?
  reported    Boolean?
  watchDate   DateTime?
  watchTime   DateTime?
  extraField2 String?

  user        User      @relation(fields: [userId], references: [id])
  post        Post?     @relation(fields: [postId], references: [id], map: "review_postId_fkey")


}

model Actor {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  key         Int
  name        String?
  image       String?
  profile     String?
  snsLink     String?
  fk          Int?

  castings    Casting[]
}

model Musical {
  id          Int                @id
  theaterId   Int
  name        String?
  startDate   DateTime?
  endDate     DateTime?
  poster      String?
  createdAt   DateTime?
  updatedAt   DateTime?

  castings    Casting[]
  theater     Theater            @relation(fields: [theaterId], references: [id])
  communities MusicalCommunity[]
  viewings    ViewingRecord[]


}

model Theater {
  id           Int       @id  @default(autoincrement())
  regionId     Int
  name         String?
  seatCount    Int?
  roadAddress  String?
  createdAt    DateTime?
  updatedAt    DateTime?

  musicals    Musical[]
  seats       Seat[]
  region      Region    @relation(fields: [regionId], references: [id])


}

model Seat {
  id        Int             @id @default(autoincrement())
  theaterId Int
  row       String
  column    Int
  seat_type SeatType
  floor     String?

  theater   Theater         @relation(fields: [theaterId], references: [id])
  viewings  ViewingRecord[] // 이 좌석을 사용한 관극기록들 

  @@unique([theaterId, row, column])
}


model Community {
  id                    Int                @id @default(autoincrement())
  type                  CommunityType
  targetId              Int?
  groupName             String
  musicalName           String?
  recentPerformanceDate DateTime?
  theaterName           String?
  ticketLink            String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
 
  
  userCommunities       UserCommunity[]
  musicalCommunities    MusicalCommunity[]
  posts                 Post[]
  multiProfiles         MultiProfile[]
  memoryBooks           MemoryBook[] 
  
}

model Setting {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  useBackground   Boolean?
  useProfilePhoto Boolean?
  allowRepost     Boolean?

  users User @relation(fields: [userId], references:[id])
}
// 게시물 관련 태그 

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())

  postTags  PostTag[]
}

model PostTag {
  postId    Int
  tagId     Int
  tagPostId Int?
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagPost   Tag_Post? @relation(fields: [tagPostId], references:[id])

  @@id([postId, tagId])
}

model Image {
  id      Int     @id @default(autoincrement())
  postId  Int
  url     String?
  caption String?

  post    Post    @relation(fields: [postId], references: [id])

}

model Subscribe {
  id        Int       @id
  userId    Int
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean?

  user      User      @relation(fields: [userId], references: [id])

}

model Follow {
  id          Int       @id
  followerId  Int
  followingId Int
  createdAt   DateTime?

  follower    User      @relation("Follower", fields: [followerId], references: [id])
  following   User      @relation("Following", fields: [followingId], references: [id])

}

model ViewingRecord {
  id        Int            @id @default(autoincrement())
  userId    Int
  musicalId Int
  seatId    Int? // 좌석 FK
  date      DateTime? // 관극 날짜 
  time      DateTime? // 관극 시간 
  content   String? // 관람 후기 
  rating    Int? // 별점 1~5

  images    ViewingImage[]
  musical   Musical        @relation(fields: [musicalId], references: [id])
  seat      Seat?          @relation(fields: [seatId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

}

model ViewingImage {
  id        Int           @id @default(autoincrement())
  viewingId Int
  url       String
  createdAt DateTime?     @default(now())

  viewing   ViewingRecord @relation(fields: [viewingId], references: [id])

}

model Question {
  id             Int             @id @default(autoincrement())
  userId         Int
  title          String
  content        String
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime        @updatedAt

  answers        Answer[]
  user           User            @relation(fields: [userId], references: [id])
  likes          QuestionLike[]
  images         QuestionImage[]
  answerLikes    AnswerLike[]

  questionGoods  QuestionGood[]
  questionTags   QuestionTag[]

}

model Answer {
  id         Int       @id @default(autoincrement())
  questionId Int
  userId     Int
  content    String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime  @updatedAt

  question   Question  @relation(fields: [questionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  likes      AnswerLike[]
}

model QuestionLike {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([questionId, userId])
}

model AnswerLike {
  id         Int      @id @default(autoincrement())
  answerId   Int
  userId     Int
  questionId Int
  createdAt  DateTime @default(now())

  answer   Answer   @relation(fields: [answerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@unique([answerId, userId])
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String
  theaters Theater[]
}

model Casting {
  id        Int     @id @default(autoincrement())
  musicalId Int
  actorId   Int
  role      String?

  actor     Actor   @relation(fields: [actorId], references: [id])
  musical   Musical @relation(fields: [musicalId], references: [id])


}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  joinedAt    DateTime? @default(now())

  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([communityId], map: "UserCommunity_communityId_fkey")
  @@index([userId], map: "UserCommunity_userId_fkey")
}

model MusicalCommunity {
  id          Int       @id @default(autoincrement())
  musicalId   Int
  communityId Int

  community   Community @relation(fields: [communityId], references: [id])
  musical     Musical   @relation(fields: [musicalId], references: [id])

  
}

model MultiProfile {
  id       Int     @id @default(autoincrement())
  userId   Int
  nickname String
  image    String?
  bio      String?
  communityId Int

  user     User    @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])

}

model MemoryBook {
  id          Int        @id @default(autoincrement())
  userId      Int
  targetType  TargetType
  targetId    Int
  title       String
  content     Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt


  communityId Int?       @unique
  community   Community? @relation(fields: [communityId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

}

model QuestionGood {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([questionId], map: "QuestionGood_questionId_fkey")
  @@index([userId], map: "QuestionGood_userId_fkey")
}

model QuestionImage {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])


}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  tagId      Int
  createdAt  DateTime @default(now())


  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  tag        QuestionTagMaster @relation(fields: [tagId],references: [id])

}

model QuestionTagMaster {
  id        Int      @id @default(autoincrement())
  tagName   String   @unique
  createdAt DateTime @default(now())

  questions QuestionTag[]
}

enum RepostType {
  post
  review
}

enum MediaType {
  image
  video
}

enum SeatType {
  VIP
  일반석
}

enum TargetType {
  MUSICAL
  ACTOR
}

enum CommunityType {
  musical
  actor
}