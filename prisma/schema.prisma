generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RepostType {
  post
  review
}

enum MediaType {
  image
  video
}

model User {
  id            Int      @id @default(autoincrement())
  loginId       String   @unique
  settingId     Int      @unique
  username      String?
  password      String?
  email         String  @unique
  nickname      String?
  profileImage  String?
  createdAt     DateTime?
  updatedAt     DateTime?
  bio           String?
  birthDate     DateTime?
  isSubscribed  Boolean?

  setting        Setting   @relation(fields: [settingId], references: [id])
  posts         Post[]
  reviews       Review[]
  comments      Comment[]
  postLikes     PostLike[]
  bookmarks     Bookmark[]
  questions     Question[]
  answers       Answer[]
  subscriptions Subscribe[]
  viewings      ViewingRecord[]
  follows       Follow[] @relation("Following")
  followers     Follow[] @relation("Follower")

  multiProfiles  MultiProfile[]
  userCommunities UserCommunity[]
  
  memoryBooks    MemoryBook[]
}

model Post {
  id                Int            @id @default(autoincrement())
  userId            Int
  communityId       Int
  isRepost          Boolean        @default(false)       
  repostType        RepostType?                         //'post', 'review'
  repostTargetId    Int?                                
  title             String?                             
  content           String?                             
  mediaType         MediaType?                          //'image', 'video'
  viewCount         Int            @default(0)           
  commentCount      Int            @default(0)           
  likeCount         Int            @default(0)           
  bookmarkCount     Int            @default(0)           
  repostCount       Int            @default(0)           
  createdAt         DateTime       @default(now())       
  updatedAt         DateTime       @updatedAt            

  // Relations
  user              User           @relation(fields: [userId], references: [id])
  community         Community      @relation(fields: [communityId], references: [id])

  comments          Comment[]
  postLikes         PostLike[]
  bookmarks         Bookmark[]
  postTags          PostTag[] 
  images            Image[]
  reviews           Review[]
}

model Comment {
  id              Int      @id @default(autoincrement())
  postId          Int
  userId          Int
  anonymous       Boolean?
  content         String?
  createdAt         DateTime       @default(now())       
  updatedAt         DateTime       @updatedAt  

  post            Post     @relation(fields: [postId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model PostLike {
  id        Int     @id @default(autoincrement())
  postId    Int
  userId    Int
  likedAt   DateTime? @default(now())

  post      Post    @relation(fields: [postId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, postId]) // 같은 유저가 같은 글에 여러 번 좋아요 못 누르게
}

model Bookmark {
  id      Int    @id @default(autoincrement())
  userId  Int
  postId  Int

  user    User   @relation(fields: [userId], references: [id])
  post    Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // 중복 북마크 방지
}

model Review {
  id             Int      @id @default(autoincrement())
  userId         Int
  settingId      Int
  theaterId      Int
  key            Int
  postId         Int?
  content        String?
  rating         Int?
  spoiler        Boolean?
  createdAt      DateTime?
  updatedAt      DateTime?
  liked          String?
  likeCount      Int?
  comment        String?
  imageUrl       String?
  reported       Boolean?
  watchDate      DateTime?
  watchTime      DateTime?
  extraField2    String?

  user        User   @relation(fields: [userId], references: [id])
  post        Post?  @relation(fields: [postId], references: [id], map: "review_postId_fkey")
}

model Actor {
  id             Int     @id @default(autoincrement())
  userId         Int
  communityId    Int
  key            Int
  name           String?
  image          String?
  profile        String?
  snsLink        String?
  fk             Int?

  castings       Casting[]
}

model Musical {
  id           Int       @id
  theaterId    Int
  name         String?
  startDate    DateTime?
  endDate      DateTime?
  poster       String?
  createdAt    DateTime?
  updatedAt    DateTime?

  theater      Theater   @relation(fields: [theaterId], references: [id])
  castings     Casting[]
  viewings     ViewingRecord[]
  communities  MusicalCommunity[]
}

model Theater {
  id           Int       @id
  regionId     Int
  name         String?
  seatCount    Int?
  roadAddress  String?
  createdAt    DateTime?
  updatedAt    DateTime?

  region       Region    @relation(fields: [regionId], references: [id])
  musicals     Musical[]
  seats        Seat[]
}

model Seat {
  id           Int     @id @default(autoincrement())
  theaterId    Int
  row          String  
  column       Int 
  seat_type    SeatType
  floor        String?

  theater      Theater @relation(fields: [theaterId], references: [id])
  viewings     ViewingRecord[] // 이 좌석을 사용한 관극기록들 

  @@unique([theaterId,row,column])
}
enum SeatType {
  VIP
  일반석
}

model Community {
  id        Int      @id @default(autoincrement()) 
  createdAt DateTime?
  name      String?
  type      String?
  description  String?
  musicalName         String?
  recentPerformanceDate DateTime?
  theaterName         String?
  ticketLink          String?
  profileImage        String?

  userCommunities UserCommunity[]
  musicalCommunities MusicalCommunity[]
  posts Post[]
}


model Setting {
  id              Int      @id  @default(autoincrement())
  useBackground   Boolean?
  useProfilePhoto Boolean?
  allowRepost     Boolean?

  users           User?    @relation()
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String @unique
  createdAt         DateTime       @default(now())

  postTags      PostTag[]
}

model PostTag {
  postId Int
  tagId  Int
  createdAt         DateTime       @default(now())

  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId]) // 복합 PK로 중복 저장 방지
}



model Image {
  id     Int    @id @default(autoincrement())
  postId    Int
  url       String?
  caption   String?

  post      Post    @relation(fields: [postId], references: [id])
}

model Subscribe {
  id         Int     @id
  userId     Int
  startDate  DateTime?
  endDate    DateTime?
  isActive   Boolean?

  user       User    @relation(fields: [userId], references: [id])
}

model Follow {
  id         Int     @id
  followerId Int
  followingId Int
  createdAt DateTime?

  follower   User @relation("Follower", fields: [followerId], references: [id])
  following  User @relation("Following", fields: [followingId], references: [id])
}

model ViewingRecord {
  id         Int     @id @default(autoincrement())
  userId     Int
  musicalId  Int
  seatId     Int? // 좌석 FK
  date       DateTime? // 관극 날짜 
  time       DateTime? // 관극 시간 
  content    String?  // 관람 후기 
  rating     Int?   // ⭐️ 별점 (1~5)
  
  user       User    @relation(fields: [userId], references: [id])
  musical    Musical @relation(fields: [musicalId], references: [id])
  seat       Seat?   @relation(fields: [seatId], references: [id])
  images     ViewingImage[] // 1:N관계 
}


model ViewingImage {
  id         Int            @id @default(autoincrement())
  viewingId  Int            // 관극기록 FK
  url        String         // 이미지 URL
  createdAt  DateTime?      @default(now())

  viewing    ViewingRecord  @relation(fields: [viewingId], references: [id])
}

model Question {
  id          Int     @id @default(autoincrement())
  userId      Int
  title       String
  content     String
  createdAt   DateTime? @default(now())

  user        User     @relation(fields: [userId], references: [id])
  answers     Answer[]
}

model Answer {
  id          Int     @id @default(autoincrement())
  questionId  Int
  userId      Int
  content     String
  createdAt   DateTime? @default(now())

  question    Question @relation(fields: [questionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Region {
  id        Int     @id @default(autoincrement())
  name      String
  theaters  Theater[]
}

model Casting {
  id         Int    @id @default(autoincrement())
  musicalId  Int
  actorId    Int
  role       String?

  musical    Musical @relation(fields: [musicalId], references: [id])
  actor      Actor   @relation(fields: [actorId], references: [id])
}

model UserCommunity {
  id           Int     @id @default(autoincrement())
  userId       Int
  communityId  Int
  joinedAt     DateTime? @default(now())

  user         User     @relation(fields: [userId], references: [id])
  community    Community @relation(fields: [communityId], references: [id])
}

model MusicalCommunity {
  id            Int     @id @default(autoincrement())
  musicalId     Int
  communityId   Int

  musical       Musical   @relation(fields: [musicalId], references: [id])
  community     Community @relation(fields: [communityId], references: [id])
}

model MultiProfile {
  id          Int     @id @default(autoincrement())
  userId      Int
  nickname    String
  image       String?
  bio         String?

  user        User    @relation(fields: [userId], references: [id])
}

model MemoryBook {
  id          Int         @id @default(autoincrement())
  userId      Int
  targetType  TargetType
  targetId    Int
  title       String
  content     Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id])
}

enum TargetType {
  MUSICAL
  ACTOR
}

