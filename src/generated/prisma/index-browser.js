
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  settingId: 'settingId',
  username: 'username',
  password: 'password',
  email: 'email',
  nickname: 'nickname',
  profileImage: 'profileImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bio: 'bio',
  birthDate: 'birthDate',
  isSubscribed: 'isSubscribed'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  settingId: 'settingId',
  communityId: 'communityId',
  title: 'title',
  content: 'content',
  category: 'category',
  like: 'like',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  repost: 'repost',
  bookmark: 'bookmark',
  communityGroup: 'communityGroup',
  viewCount: 'viewCount',
  tag: 'tag',
  mediaType: 'mediaType',
  isPinned: 'isPinned',
  tabCategory: 'tabCategory',
  isShared: 'isShared',
  musicalId: 'musicalId',
  actorId: 'actorId',
  extraField: 'extraField'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  settingId: 'settingId',
  communityId: 'communityId',
  content: 'content',
  createdAt: 'createdAt',
  anonymous: 'anonymous'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  settingId: 'settingId',
  theaterId: 'theaterId',
  key: 'key',
  postId: 'postId',
  content: 'content',
  rating: 'rating',
  spoiler: 'spoiler',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  liked: 'liked',
  likeCount: 'likeCount',
  comment: 'comment',
  imageUrl: 'imageUrl',
  reported: 'reported',
  watchDate: 'watchDate',
  watchTime: 'watchTime',
  extraField2: 'extraField2'
};

exports.Prisma.ActorScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  settingId: 'settingId',
  communityId: 'communityId',
  key: 'key',
  name: 'name',
  image: 'image',
  profile: 'profile',
  snsLink: 'snsLink',
  fk: 'fk'
};

exports.Prisma.MusicalScalarFieldEnum = {
  id: 'id',
  theaterId: 'theaterId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  poster: 'poster',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TheaterScalarFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  name: 'name',
  seatCount: 'seatCount',
  roadAddress: 'roadAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeatScalarFieldEnum = {
  id: 'id',
  theaterId: 'theaterId',
  locationId: 'locationId',
  field: 'field',
  field2: 'field2',
  field3: 'field3',
  floor: 'floor'
};

exports.Prisma.CommunityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  type: 'type'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  useBackground: 'useBackground',
  useProfilePhoto: 'useProfilePhoto',
  allowRepost: 'allowRepost'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  name: 'name',
  type: 'type'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  url: 'url',
  caption: 'caption'
};

exports.Prisma.SubscribeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.ViewingRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  musicalId: 'musicalId',
  date: 'date',
  seat: 'seat'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  likedAt: 'likedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CastingScalarFieldEnum = {
  id: 'id',
  musicalId: 'musicalId',
  actorId: 'actorId',
  role: 'role'
};

exports.Prisma.UserCommunityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  communityId: 'communityId',
  joinedAt: 'joinedAt'
};

exports.Prisma.MusicalCommunityScalarFieldEnum = {
  id: 'id',
  musicalId: 'musicalId',
  communityId: 'communityId'
};

exports.Prisma.MultiProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  nickname: 'nickname',
  image: 'image',
  bio: 'bio'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  loginId: 'loginId',
  username: 'username',
  password: 'password',
  email: 'email',
  nickname: 'nickname',
  profileImage: 'profileImage',
  bio: 'bio'
};

exports.Prisma.PostOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content',
  category: 'category',
  like: 'like',
  communityGroup: 'communityGroup',
  tag: 'tag',
  extraField: 'extraField'
};

exports.Prisma.CommentOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  content: 'content',
  liked: 'liked',
  comment: 'comment',
  imageUrl: 'imageUrl',
  extraField2: 'extraField2'
};

exports.Prisma.ActorOrderByRelevanceFieldEnum = {
  name: 'name',
  image: 'image',
  profile: 'profile',
  snsLink: 'snsLink'
};

exports.Prisma.MusicalOrderByRelevanceFieldEnum = {
  name: 'name',
  poster: 'poster'
};

exports.Prisma.TheaterOrderByRelevanceFieldEnum = {
  name: 'name',
  roadAddress: 'roadAddress'
};

exports.Prisma.SeatOrderByRelevanceFieldEnum = {
  field: 'field',
  field2: 'field2',
  field3: 'field3',
  floor: 'floor'
};

exports.Prisma.CommunityOrderByRelevanceFieldEnum = {
  name: 'name',
  type: 'type'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  name: 'name',
  type: 'type'
};

exports.Prisma.ImageOrderByRelevanceFieldEnum = {
  url: 'url',
  caption: 'caption'
};

exports.Prisma.ViewingRecordOrderByRelevanceFieldEnum = {
  seat: 'seat'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content'
};

exports.Prisma.AnswerOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.RegionOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.CastingOrderByRelevanceFieldEnum = {
  role: 'role'
};

exports.Prisma.MultiProfileOrderByRelevanceFieldEnum = {
  nickname: 'nickname',
  image: 'image',
  bio: 'bio'
};
exports.ImageOrVideo = exports.$Enums.ImageOrVideo = {
  image: 'image',
  video: 'video'
};

exports.Category = exports.$Enums.Category = {
  highlight: 'highlight',
  media: 'media',
  memorybook: 'memorybook'
};

exports.Prisma.ModelName = {
  User: 'User',
  Post: 'Post',
  Comment: 'Comment',
  Review: 'Review',
  Actor: 'Actor',
  Musical: 'Musical',
  Theater: 'Theater',
  Seat: 'Seat',
  Community: 'Community',
  Setting: 'Setting',
  Tag: 'Tag',
  Image: 'Image',
  Subscribe: 'Subscribe',
  Follow: 'Follow',
  ViewingRecord: 'ViewingRecord',
  PostLike: 'PostLike',
  Question: 'Question',
  Answer: 'Answer',
  Region: 'Region',
  Casting: 'Casting',
  UserCommunity: 'UserCommunity',
  MusicalCommunity: 'MusicalCommunity',
  MultiProfile: 'MultiProfile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
