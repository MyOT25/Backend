generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ImageOrVideo {
  image
  video
}

enum Category {
  highlight
  media
  memorybook
}

model User {
  id           Int       @id @default(autoincrement())
  loginId      String    @unique
  settingId    Int       @unique
  username     String?
  password     String?
  email        String    @unique
  nickname     String?
  profileImage String?
  createdAt    DateTime?
  updatedAt    DateTime?
  bio          String?
  birthDate    DateTime?
  isSubscribed Boolean?

  setting       Setting         @relation(fields: [settingId], references: [id])
  posts         Post[]
  comments      Comment[]
  reviews       Review[]
  postLikes     PostLike[]
  questions     Question[]
  answers       Answer[]
  subscriptions Subscribe[]
  viewings      ViewingRecord[]
  follows       Follow[]        @relation("Following")
  followers     Follow[]        @relation("Follower")

  multiProfiles   MultiProfile[]
  userCommunities UserCommunity[]
}

model Post {
  id             Int           @id @default(autoincrement())
  userId         Int
  settingId      Int
  communityId    Int
  title          String?
  content        String?
  category       String?
  like           String?
  likeCount      Int?
  commentCount   Int?
  createdAt      DateTime?
  updatedAt      DateTime?
  repost         Int?
  bookmark       Int?
  communityGroup String?
  viewCount      Int?
  tag            String?
  mediaType      ImageOrVideo?
  isPinned       Boolean?
  tabCategory    Category?
  isShared       Boolean?
  musicalId      Int?
  actorId        Int?
  extraField     String?

  user    User    @relation(fields: [userId], references: [id])
  actor   Actor?  @relation(fields: [actorId], references: [id])
  setting Setting @relation(fields: [settingId], references: [id])

  comments  Comment[]
  postLikes PostLike[]
  images    Image[]
  reviews   Review[]
  tags      Tag[]      @relation("PostTags")
}

model Comment {
  id          Int       @id @default(autoincrement())
  postId      Int
  userId      Int
  settingId   Int
  communityId Int
  content     String?
  createdAt   DateTime?
  anonymous   Boolean?

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      Int
  settingId   Int
  theaterId   Int
  key         Int
  postId      Int?
  content     String?
  rating      Int?
  spoiler     Boolean?
  createdAt   DateTime?
  updatedAt   DateTime?
  liked       String?
  likeCount   Int?
  comment     String?
  imageUrl    String?
  reported    Boolean?
  watchDate   DateTime?
  watchTime   DateTime?
  extraField2 String?

  user User  @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id], map: "review_postId_fkey")
}

model Actor {
  id          Int     @id @default(autoincrement())
  postId      Int
  userId      Int
  settingId   Int
  communityId Int
  key         Int
  name        String?
  image       String?
  profile     String?
  snsLink     String?
  fk          Int?

  posts    Post[]
  castings Casting[]
}

model Musical {
  id        Int       @id
  theaterId Int
  name      String?
  startDate DateTime?
  endDate   DateTime?
  poster    String?
  createdAt DateTime?
  updatedAt DateTime?

  theater     Theater            @relation(fields: [theaterId], references: [id])
  castings    Casting[]
  viewings    ViewingRecord[]
  communities MusicalCommunity[]
}

model Theater {
  id          Int       @id
  regionId    Int
  name        String?
  seatCount   Int?
  roadAddress String?
  createdAt   DateTime?
  updatedAt   DateTime?

  region   Region    @relation(fields: [regionId], references: [id])
  musicals Musical[]
  seats    Seat[]
}

model Seat {
  id         Int     @id
  theaterId  Int
  locationId Int
  field      String?
  field2     String?
  field3     String?
  floor      String?

  theater Theater @relation(fields: [theaterId], references: [id])
}

model Community {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime?
  name        String?
  type        String?
  description String?

  userCommunities    UserCommunity[]
  musicalCommunities MusicalCommunity[]
}

model Setting {
  id              Int      @id @default(autoincrement())
  useBackground   Boolean?
  useProfilePhoto Boolean?
  allowRepost     Boolean?

  users User?  @relation()
  posts Post[]
}

model Tag {
  id   Int     @id @default(autoincrement())
  name String  @unique
  type String?

  posts Post[] @relation("PostTags")
}

model Image {
  id      Int     @id @default(autoincrement())
  postId  Int
  url     String?
  caption String?

  post Post @relation(fields: [postId], references: [id])
}

model Subscribe {
  id        Int       @id
  userId    Int
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean?

  user User @relation(fields: [userId], references: [id])
}

model Follow {
  id          Int       @id
  followerId  Int
  followingId Int
  createdAt   DateTime?

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])
}

model ViewingRecord {
  id        Int       @id
  userId    Int
  musicalId Int
  date      DateTime?
  seat      String?

  user    User    @relation(fields: [userId], references: [id])
  musical Musical @relation(fields: [musicalId], references: [id])
}

model PostLike {
  id      Int       @id @default(autoincrement())
  postId  Int
  userId  Int
  likedAt DateTime? @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Question {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  createdAt DateTime? @default(now())

  user    User     @relation(fields: [userId], references: [id])
  answers Answer[]
}

model Answer {
  id         Int       @id @default(autoincrement())
  questionId Int
  userId     Int
  content    String
  createdAt  DateTime? @default(now())

  question Question @relation(fields: [questionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String
  theaters Theater[]
}

model Casting {
  id        Int     @id @default(autoincrement())
  musicalId Int
  actorId   Int
  role      String?

  musical Musical @relation(fields: [musicalId], references: [id])
  actor   Actor   @relation(fields: [actorId], references: [id])
}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  joinedAt    DateTime? @default(now())

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
}

model MusicalCommunity {
  id          Int @id @default(autoincrement())
  musicalId   Int
  communityId Int

  musical   Musical   @relation(fields: [musicalId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
}

model MultiProfile {
  id       Int     @id @default(autoincrement())
  userId   Int
  nickname String
  image    String?
  bio      String?

  user User @relation(fields: [userId], references: [id])
}
